@using Dependencies;
@using WebPL.Models;
@using CommonConstants;
@using DataValidator;

@{
    Layout = "~/Pages/Layout/_BasicLayout.cshtml";

    string operationResult = DataToAddAndUpdateComment.OperationResult ?? DataToAddAndUpdateRecipe.OperationResult ?? EntityToDeleteData.DeletionResult;

    if (EntityToDeleteData.ConfirmationResult)
    {
        if (EntityToDeleteData.EntityName == "Comment")
        {
            Response.Redirect("~/Pages/DeletePages/DeleteComment.cshtml");
        }
        else if (EntityToDeleteData.EntityName == "Recipe")
        {
            EntityToDeleteData.SourcePage = "~/Index.cshtml";

            Response.Redirect("~/Pages/DeletePages/DeleteRecipe.cshtml");
        }
    }

    if (DataToRoute.RecipeId < 1)
    {
        Response.Redirect("~/Index.cshtml");
    }

    if (DependencyResolver.Instance.BL.RecipeLogic.GetRecipe(DataToRoute.RecipeId).Length == 2)
    {
        Response.Redirect("~Index.cshtml");
    }

    List<string> recipeData = DependencyResolver.Instance.BL.RecipeLogic.GetRecipe(DataToRoute.RecipeId)
        .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries).ToList();

    if (IsPost)
    {
        DefineClickTarget();
    }
}

@functions{
    int counter;

    string commentText = null;

    List<string> commentData;

    void ParseCommentData(string comment)
    {
        commentData = comment.Split(
                new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries).ToList();
    }

    void DefineClickTarget()
    {
        if (Request["deleteRecipe"] != null)
        {
            DeleteRecipe(DataToRoute.RecipeId);
        }

        else if (Request["changeRecipe"] != null)
        {
            ChangeRecipe();
        }

        else if (Request["changeComment"] != null)
        {
            AddCommentChanges();
        }

        else if (Request["addComment"] != null)
        {
            AddComment();
        }

        for (int i = 0; i < DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId).Count; i++)
        {
            UserReactionData.UserId = DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name);

            UserReactionData.Commentid = int.Parse(DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId)[i].Split(
            new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[3]);

            if (Request[i.ToString() + "like"] != null)
            {
                //I used additional response to CommentReactionPage to avoid second data sending.

                LikeComment();

                break;
            }

            else if (Request[i.ToString() + "dislike"] != null)
            {
                DislikeCommet();

                break;
            }

            else if (Request[i.ToString() + "deleteComment"] != null)
            {
                ConfirmCommentDeletion();
            }

            else if (Request[i.ToString() + "changeComment"] != null)
            {
                ChangeComment(i);
            }
        }
    }

    void DeleteRecipe(int recipeId)
    {
        EntityToDeleteData.EntityId = int.Parse(DependencyResolver.Instance.BL.RecipeLogic.GetRecipe(recipeId)
.Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[4]);

        EntityToDeleteData.SourcePage = "~/Pages/Recipe.cshtml";

        EntityToDeleteData.EntityName = "Recipe";

        Response.Redirect("~/Pages/Common/EntityDeleteConfirmation.cshtml");
    }

    void ChangeRecipe()
    {
        var recipeData = DependencyResolver.Instance.BL.RecipeLogic.GetRecipe(DataToRoute.RecipeId)
        .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries);

        DataToAddAndUpdateRecipe.RecipeTitle = recipeData[0];

        DataToAddAndUpdateRecipe.RecipeIngridients = recipeData[2];

        DataToAddAndUpdateRecipe.CookingProcess = recipeData[3];

        DataToAddAndUpdateRecipe.CreatorId = DependencyResolver.Instance.BL.RecipeLogic.GetRecipeAuthor(DataToRoute.RecipeId);

        Response.Redirect("~/Pages/AddPages/CreateRecipe.cshtml");
    }

    void AddCommentChanges()
    {
        DataToAddAndUpdateComment.Text = Request["text"];

        commentText = null;

        Response.Redirect("~/Pages/UpdatePages/UpdateComment.cshtml");
    }

    int GetUserAward()
    {
        if (Request["rate5"] != null)
        {
            return 5;
        }
        else if (Request["rate4"] != null)
        {
            return 4;
        }
        else if (Request["rate3"] != null)
        {
            return 3;
        }
        else if (Request["rate2"] != null)
        {
            return 2;
        }
        else if (Request["rate1"] != null)
        {
            return 1;
        }

        return 0;
    }

    void AddComment()
    {
        int award = GetUserAward();

        if (award != 0)
        {
            DependencyResolver.Instance.BL.RecipeLogic.RateTheRecipe(DataToRoute.RecipeId, DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name), award);
        }

        DataToAddAndUpdateComment.RecipeId = DataToRoute.RecipeId;

        DataToAddAndUpdateComment.Text = Request["text"];

        DataToAddAndUpdateComment.UserId = DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name);

        Response.Redirect("~/Pages/AddPages/AddComment.cshtml");
    }

    void LikeComment()
    {
        UserReactionData.IsDislike = false;

        Response.Redirect("~/Pages/CommentReactionPage.cshtml");

    }

    void DislikeCommet()
    {
        UserReactionData.IsDislike = true;

        Response.Redirect("~/Pages/CommentReactionPage.cshtml");
    }

    void ConfirmCommentDeletion()
    {
        EntityToDeleteData.EntityId = UserReactionData.Commentid;

        EntityToDeleteData.SourcePage = "~/Pages/Recipe.cshtml";

        EntityToDeleteData.EntityName = "Comment";

        Response.Redirect("~/Pages/Common/EntityDeleteConfirmation.cshtml");
    }

    void ChangeComment(int commentId)
    {
        DataToAddAndUpdateComment.CommentId = int.Parse(DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId)[commentId]
                .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[3]);

        commentText = DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId)[commentId]
        .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[0];
    }
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Styles/RatingSystemStyles.css" rel=" stylesheet" />
    <link rel="stylesheet" href="~/Styles/Styles.css" />
    <title>Recipe</title>
</head>
<body>

    @if (!string.IsNullOrEmpty(operationResult))
    {
        if (operationResult.ValidationPassed())
        {
            <div class="succsess_operation alert">
                <span class="closebtn alert_btn" onclick="this.parentElement.style.display='none';"> &times; </span>
                Operation succesfully executed!
            </div>
        }
        else
        {
            <div class="alert">
                <span class="closebtn alert_btn" onclick="this.parentElement.style.display='none';">&times;</span>
                @operationResult
            </div>
        }

        DataToAddAndUpdateComment.Reset();

        EntityToDeleteData.Reset();

        DataToAddAndUpdateRecipe.Reset();
    }
    <form method="post">
        <h1>
            @recipeData[0] ★ @DependencyResolver.Instance.BL.RecipeLogic.GetRecipeAward(DataToRoute.RecipeId)

            @if (DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name) == DependencyResolver.Instance.BL.RecipeLogic.GetRecipeAuthor(DataToRoute.RecipeId))
            {
                <button type="submit" class="button_params change_recipe" name="changeRecipe"> </button>
            }
            @if (DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name) == DependencyResolver.Instance.BL.RecipeLogic.GetRecipeAuthor(DataToRoute.RecipeId)
                || User.IsInRole("admin"))
            {
                <button type="submit" class="button_params delete_recipe" name="deleteRecipe"> </button>
            }
        </h1>
    </form>
    <div class="recipe_text">
        <p>
            <h2> Ingridients:</h2>
        </p>
        <p>
            @foreach (var ingridient in recipeData[2].Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries))
            {
                <h3>
                    @ingridient
                </h3>
            }
        </p>
        <h2> Cooking process</h2>
        <p>
            @foreach (var cookingStep in recipeData[3].Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries))
            {
                <h3>
                    @cookingStep
                </h3>
            }
        </p>

        <p>
            <h2> Comments:</h2>
        </p>
        <form method="post">
            @if (User.Identity.IsAuthenticated)
            {
                if (DependencyResolver.Instance.BL.RecipeLogic.GetUserAward(DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name), DataToRoute.RecipeId) < 1)
                {
                    <div class="rating-system1">
                        <h3>Give your Respect</h3>
                        <input type="radio" name='rate5' id="star5" />
                        <label for="star5"></label>

                        <input type="radio" name='rate4' id="star4" />
                        <label for="star4"></label>

                        <input type="radio" name='rate3' id="star3" />
                        <label for="star3"></label>

                        <input type="radio" name='rate2' id="star2" />
                        <label for="star2"></label>

                        <input type="radio" name='rate1' id="star1" checked />
                        <label for="star1"></label>

                        <div class="text"></div>
                    </div>
                }
                else
                {
                    <p class="recipe_text">
                        <h3>You rated this recipe with @DependencyResolver.Instance.BL.RecipeLogic.GetUserAward(DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name), DataToRoute.RecipeId)★</h3>
                    </p>
                }

                if (string.IsNullOrEmpty(commentText))
                {
                    <p>
                        <textarea name="text" class="textarea_style"> </textarea>
                    </p>

                    <button name="addComment" class="closebtn" type="submit">Add Comment</button>
                }
                else
                {
                    <p>
                        <textarea name="text" class="textarea_style">@commentText</textarea>
                    </p>

                    <button name="changeComment" class="closebtn" type="submit">Change Comment</button>
                }
            }
            else
            {
                <p>
                    Log in to add comment.
                </p>
            }
        </form>
        @if (DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId).Count > 0)
        {
            foreach (var comment in DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId))
            {
                ParseCommentData(comment);

                <div class="comment">
                    <p>
                        @DependencyResolver.Instance.BL.UserLogic.GetCommentAuthorName(int.Parse(commentData[3]))
                        ★ @DependencyResolver.Instance.BL.RecipeLogic.GetUserAward(DependencyResolver.Instance.BL.UserLogic.GetCommentAuthor(int.Parse(commentData[3])), DataToRoute.RecipeId)
                    </p>
                    <p>
                        @commentData[0]
                    </p>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <form method="post">
                            <p class="counters">
                                <button onclick="this.setAttribute(value, null);" name="@counter.ToString()like" class="button_params like" type="submit"> </button> @commentData[1]
                                <button name="@counter.ToString()dislike" class="button_params dislike" type="submit"> </button> @commentData[2]

                                @if (DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name) == DependencyResolver.Instance.BL.UserLogic.GetCommentAuthor(int.Parse(commentData[3]))
                                    || User.IsInRole("admin"))
                                {
                                    <button type="submit" class="button_params delete_comment" name="@counter.ToString()deleteComment"> </button>
                                    <button type="submit" class="button_params change_comment" name="@counter.ToString()changeComment"> </button>
                                }
                            </p>
                        </form>
                    }
                    else
                    {
                        <p class="counters">
                            <a name="@counter.ToString()like" class="button_params like"> </a> @commentData[1]
                            <a name="@counter.ToString()dislike" class="button_params dislike"> </a> @commentData[2]
                        </p>
                    }
                </div>

                counter++;
            }
        }
        else
        {
            <div class="comment">
                <p>
                    There is 0 comments now.
                </p>
            </div>
        }

    </div>
</body>
</html>
