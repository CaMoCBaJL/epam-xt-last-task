@using Dependencies;
@using WebPL.Models;
@using CommonConstants;
@using DataValidator;

@{
    Layout = "~/Pages/Layout/_BasicLayout.cshtml";

    if (EntityToDeleteData.ConfirmationResult)
    {
        Response.Redirect("~/Pages/DeletePages/DeleteComment.cshtml");
    }

    if (DataToRoute.RecipeId < 1)
    {
        Response.Redirect("~/Index.cshtml");
    }

    if (DependencyResolver.Instance.BL.RecipeLogic.GetRecipe(DataToRoute.RecipeId).Length == 2)
    {
        Response.Redirect("~Index.cshtml");
    }

    List<string> recipeData = DependencyResolver.Instance.BL.RecipeLogic.GetRecipe(DataToRoute.RecipeId).Split(
        new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries).ToList();

    if (IsPost)
    {
        DefineClickTarget();
    }
}

@functions{
    int counter;

    string commentText = null;

    List<string> commentData;

    void ParseCommentData(string comment)
    {
        commentData = comment.Split(
                new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries).ToList();
    }

    void DefineClickTarget()
    {
        if (Request["changeComment"] != null)
        {
            DataToAddAndUpdateComment.Text = Request["text"];

            commentText = null;

            Response.Redirect("~/Pages/UpdatePages/UpdateComment.cshtml");
        }

        else if (Request["addComment"] != null)
        {
            int award = 0;

            if (Request["rate5"] != null)
            {
                award = 5;
            }
            else if (Request["rate4"] != null)
            {
                award = 4;
            }
            else if (Request["rate3"] != null)
            {
                award = 3;
            }
            else if (Request["rate2"] != null)
            {
                award = 2;
            }
            else if (Request["rate1"] != null)
            {
                award = 1;
            }

            if (award != 0)
            {
                DependencyResolver.Instance.BL.RecipeLogic.RateTheRecipe(DataToRoute.RecipeId, DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name), award);
            }

            DataToAddAndUpdateComment.RecipeId = DataToRoute.RecipeId;

            DataToAddAndUpdateComment.Text = Request["text"];

            DataToAddAndUpdateComment.UserId = DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name);

            Response.Redirect("~/Pages/AddPages/AddComment.cshtml");
        }

        for (int i = 0; i < DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId).Count; i++)
        {
            UserReactionData.UserId = DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name);

            UserReactionData.Commentid = int.Parse(DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId)[i].Split(
            new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[3]);

            if (Request[i.ToString() + "like"] != null)
            {
                //I used additional response to CommentReactionPage to avoid second data sending.

                UserReactionData.IsDislike = false;

                Response.Redirect("~/Pages/CommentReactionPage.cshtml");

                break;
            }

            else if (Request[i.ToString() + "dislike"] != null)
            {

                UserReactionData.IsDislike = true;

                Response.Redirect("~/Pages/CommentReactionPage.cshtml");

                break;
            }

            else if (Request[i.ToString() + "del"] != null)
            {
                EntityToDeleteData.EntityId = UserReactionData.Commentid;

                EntityToDeleteData.SourcePage = "~/Pages/Recipe.cshtml";

                EntityToDeleteData.EntityName = "comment";

                Response.Redirect("~/Pages/Common/EntityDeleteConfirmation.cshtml");
            }

            else if (Request[i.ToString() + "ch"] != null)
            {
                DataToAddAndUpdateComment.CommentId = int.Parse(DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId)[i]
                    .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[3]);

                commentText = DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId)[i]
                .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[0];
            }
        }
    }


}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Styles/RatingSystemStyles.css" rel=" stylesheet" />
    <link rel="stylesheet" href="~/Styles/Styles.css" />
    <title>Recipe</title>
</head>
<body>

    @if (!string.IsNullOrEmpty(EntityToDeleteData.DeletionResult))
    {
        if (EntityToDeleteData.DeletionResult.ValidationPassed())
        {
            <div class="succsess_operation alert">
                <span class="closebtn" onclick="this.parentElement.style.display='none';"> &times; </span>
                Comment successfully deleted!
            </div>
        }
        else
        {
            <div class="alert">
                <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
                @EntityToDeleteData.DeletionResult
            </div>
        }

        EntityToDeleteData.Reset();
    }

    @if (!string.IsNullOrEmpty(DataToAddAndUpdateComment.OperationResult))
    {
        if (DataToAddAndUpdateComment.OperationResult.ValidationPassed())
        {
            <div class="succsess_operation alert">
                <span class="closebtn" onclick="this.parentElement.style.display='none';"> &times; </span>
                Operation succesfully executed!
            </div>
        }
        else
        {
            <div class="alert">
                <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
                @DataToAddAndUpdateComment.OperationResult
            </div>
        }

        DataToAddAndUpdateComment.Reset();
    }
    <h1>
        @recipeData[0] ★ @DependencyResolver.Instance.BL.RecipeLogic.GetRecipeAward(DataToRoute.RecipeId)
    </h1>
    <div class="recipe_text">
        <p>
            <h2> Ingridients:</h2>
        </p>
        <p>
            @foreach (var ingridient in recipeData[2].Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries))
            {
                <h3>
                    @ingridient
                </h3>
            }
        </p>
        <h2> Cooking process</h2>
        <p>
            @foreach (var cookingStep in recipeData[3].Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries))
            {
                <h3>
                    @cookingStep
                </h3>
            }
        </p>

        <p>
            <h2> Comments:</h2>
        </p>
        <form method="post">
            @if (User.Identity.IsAuthenticated)
            {
                if (DependencyResolver.Instance.BL.RecipeLogic.GetUserAward(DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name)) < 1)
                {
                    <div class="rating-system1">
                        <h3>Give your Respect</h3>
                        <input type="radio" name='rate5' id="star5" />
                        <label for="star5"></label>

                        <input type="radio" name='rate4' id="star4" />
                        <label for="star4"></label>

                        <input type="radio" name='rate3' id="star3" />
                        <label for="star3"></label>

                        <input type="radio" name='rate2' id="star2" />
                        <label for="star2"></label>

                        <input type="radio" name='rate1' id="star1" checked />
                        <label for="star1"></label>

                        <div class="text"></div>
                    </div>
                }
                else
                {
                    <p class="recipe_text">
                        <h3>You rated this recipe with @DependencyResolver.Instance.BL.RecipeLogic.GetUserAward(DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name))★</h3>
                    </p>
                }

                if (string.IsNullOrEmpty(commentText))
                {
                    <p>
                        <textarea name="text" class="textarea_style"> </textarea>
                    </p>

                    <button name="addComment" class="closebtn" type="submit">Add Comment</button>
                }
                else
                {
                    <p>
                        <textarea name="text" class="textarea_style">@commentText</textarea>
                    </p>

                    <button name="changeComment" class="closebtn" type="submit">Change Comment</button>
                }
            }
            else
            {
                <p>
                    Log in to add comment.
                </p>
            }
        </form>
        @if (DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId).Count > 0)
        {
            foreach (var comment in DependencyResolver.Instance.BL.RecipeLogic.GetRecipeCommentaries(DataToRoute.RecipeId))
            {
                ParseCommentData(comment);

                <div class="comment">
                    <p>
                        @DependencyResolver.Instance.BL.UserLogic.GetCommentAuthorName(int.Parse(commentData[3]))
                        ★ @DependencyResolver.Instance.BL.RecipeLogic.GetUserAward(DependencyResolver.Instance.BL.UserLogic.GetCommentAuthor(int.Parse(commentData[3])))
                    </p>
                    <p>
                        @commentData[0]
                    </p>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <form method="post">
                            <p class="counters">
                                <button onclick="this.setAttribute(value, null);" name="@counter.ToString()like" class="button_params like" type="submit"> </button> @commentData[1]
                                <button name="@counter.ToString()dislike" class="button_params dislike" type="submit"> </button> @commentData[2]

                                @if (DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name) == DependencyResolver.Instance.BL.UserLogic.GetCommentAuthor(int.Parse(commentData[3])))
                                {
                                    <button type="submit" class="button_params delete_comment" name="@counter.ToString()del"> </button>
                                    <button type="submit" class="button_params change_comment" name="@counter.ToString()ch"> </button>
                                }
                            </p>
                        </form>
                    }
                    else
                    {
                        <p class="counters">
                            <a name="@counter.ToString()like" class="like"> </a> @commentData[1]
                            <a name="@counter.ToString()dislike" class="dislike"> </a> @commentData[2]
                        </p>
                    }
                </div>

                counter++;
            }
        }
        else
        {
            <div class="comment">
                <p>
                    There is 0 comments now.
                </p>
            </div>
        }

    </div>
</body>
</html>
