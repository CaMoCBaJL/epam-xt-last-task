@using WebPL.Models;
@using Dependencies;
@using CommonConstants;
@using DataValidator;

@{
    string operationResult = EntityToDeleteData.DeletionResult ?? RegistrationData.OperationResult;

    if (DataToRoute.UserId == 0)
    {
        Response.Redirect("~/Index.cshtml");
    }

    if (EntityToDeleteData.ConfirmationResult)
    {
        if (EntityToDeleteData.EntityName == "user")
        {
            Response.Redirect("~/Pages/DeletePages/DeleteUser.cshtml");
        }
        else
        {
            Response.Redirect("~/Pages/DeletePages/DeleteRecipe.cshtml");
        }
    }

    if (!User.Identity.IsAuthenticated)
    {
        Response.Redirect("~/Index.cshtml");
    }

    if (IsPost)
    {
        DefineClickTarget();
    }

    localDataToShow = userData[i].Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries).ToList();
}

@functions{
    List<string> userData = DependencyResolver.Instance.BL.UserLogic.GetUserInfo(DataToRoute.UserId);

    public List<string> localDataToShow = new List<string>();

    public int i = 2;

    public int recipeCounter = DependencyResolver.Instance.BL.UserLogic.GetUserRecipes(DataToRoute.UserId).Count;

    void DefineClickTarget()
    {
        if (Request["changeUserData"] != null)
        {
            RegistrationData.Age = userData[0].Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[1];

            RegistrationData.UserName = userData[0].Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[0];

            RegistrationData.Login = User.Identity.Name;

            Response.Redirect("~/Pages/AddPages/Registration.cshtml");
        }

        else if (Request["addRecipe"] != null)
        {
            Response.Redirect("~/Pages/AddPages/CreateRecipe.cshtml");
        }

        else if (Request["signOut"] != null)
        {
            FormsAuthentication.SignOut();

            Response.Redirect("~/Index.cshtml");
        }

        else if (Request["changeidentity"] != null)
        {
            Response.Redirect("~/Pages/ChangeIdentity.cshtml");
        }

        else if (Request["changeUserData"] != null)
        {
            Response.Redirect("~/Pages/ChangeUserData.cshtml");
        }

        else if (Request["delete"] != null)
        {
            EntityToDeleteData.EntityName = "User";

            EntityToDeleteData.EntityId = DependencyResolver.Instance.BL.UserLogic.GetUserId(User.Identity.Name);

            EntityToDeleteData.SourcePage = "~/Pages/UserPage.cshtml";

            Response.Redirect("~/Pages/Common/EntityDeleteConfirmation.cshtml");
        }

        for (int i = 2; i < userData.Count; i++)
        {
            if (Request[i.ToString() + "rec"] != null)
            {
                DataToRoute.RecipeId = int.Parse(DependencyResolver.Instance.BL.UserLogic.GetUserRecipes(DataToRoute.UserId)[i - 2]
                    .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[4]);

                Response.Redirect("~/Pages/Recipe.cshtml");
            }

            else if (Request[i.ToString() + "com"] != null)
            {
                DataToRoute.RecipeId = DependencyResolver.Instance.BL.CommentLogic.FindCommentLocation(
                    int.Parse(DependencyResolver.Instance.BL.UserLogic.GetUserCommentaries(DataToRoute.UserId)[i - 2 - recipeCounter]
                    .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[3]));

                Response.Redirect("~/Pages/Recipe.cshtml");
            }

            else if (Request[i.ToString() + "del"] != null)
            {
                EntityToDeleteData.EntityId = int.Parse(DependencyResolver.Instance.BL.UserLogic.GetUserRecipes(DataToRoute.UserId)[i - 2]
                    .Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[4]);

                EntityToDeleteData.SourcePage = "~/Pages/UserPage.cshtml";

                EntityToDeleteData.EntityName = "recipe";

                Response.Redirect("~/Pages/Common/EntityDeleteConfirmation.cshtml");
            }
        }
    }
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="~/Styles/Styles.css" />

    <title></title>
</head>
<body>
    @if (!string.IsNullOrEmpty(operationResult))
    {
        if (operationResult.ValidationPassed())
        {
            <div class="succsess_operation alert">
                <span class="closebtn" onclick="this.parentElement.style.display='none';"> &times; </span>
                Operation successfully completed!
            </div>
        }
        else
        {
            <div class="alert">
                <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
                @operationResult
            </div>
        }

        EntityToDeleteData.Reset();

        RegistrationData.Reset();
    }

    <div class="user_info">
        Welcome,

        @userData[0].Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[0]

        <p>
            User information:
        </p>
        <p>
            Age: @userData[0].Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries)[1]
        </p>
        <form method="post">
            <div class="user_data_list ">
                @if (localDataToShow.Count == 5)
                {
                    <p>My Recipes:</p>

                    while (localDataToShow.Count == 5)
                    {
                        <div class="recipe_block">
                            <button class="recipe_button button" name="@i.ToString()rec" type="submit"> @localDataToShow[0]</button>
                            <button type="submit" class="delete_recipe button_params" name="@i.ToString()del"></button>
                        </div>
                        i++;

                        localDataToShow = userData[i].Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries).ToList();
                    }
                }
                else
                {
                    <p>
                        There are no recipes.
                    </p>
                }

                <button class="recipe_button button" type="submit" name="addRecipe"> Add Recipe</button>
            </div>
            <div class="user_data_list">
                @if (localDataToShow.Count == 4)
                {
                    <p> My Comments:</p>

                    while (localDataToShow.Count == 4 && i + 1 < userData.Count)
                    {
                        <p>
                            <button class="comment_button button" name="@i.ToString()com" type="submit"> @localDataToShow[0]</button>
                        </p>

                        i++;

                        localDataToShow = userData[i].Split(new string[] { DelimiterConstant.myDelimiter }, StringSplitOptions.RemoveEmptyEntries).ToList();

                    }
                }
                else
                {
                    <p>
                        There are no comments.
                    </p>
                }
            </div>
            <div class="sign_out">
                <p>
                    <button name="signOut" type="submit" class="button sign_out_button"> Sign Out</button>
                </p>
                <button type="submit" class="button sign_out_button" name="changeUserData"> Change UserName/Age</button>
                <p>
                    <button type="submit" class="button sign_out_button" name="delete"> Delete account</button>
                </p>
            </div>
        </form>
    </div>
</body>
</html>
